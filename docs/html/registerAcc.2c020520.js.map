{"mappings":"AAEA,MAAMA,EAOFC,YACIC,EACAC,EACAC,EACAC,GAEAC,KAAKJ,SAAWA,EAChBI,KAAKH,SAAWA,EAChBG,KAAKF,IAAMA,EACXE,KAAKD,MAAQA,CACjB,EAGJ,SAASE,EAAiBC,EAAWC,EAAWC,GAE5C,MAAMR,EAAWM,EAAgCG,MAC3CR,EAAWM,EAAgCE,MACjD,IAAIC,EAEJ,GAAIF,EAAU,CACV,MAAMN,EAAMM,EAA+BC,MAC3CC,EAAa,IAAIZ,EAAKE,EAAUC,EAAUC,EAC9C,MAGIQ,EAAa,IAAIZ,EAAKE,EAAUC,GAGpC,OAAOS,CACX,CCnCA,MAAMC,EAAU,6EAEhBC,eAAeC,IAEX,MAAMC,EAAMH,EAAU,aAChBI,QAAiBC,MAAMF,GAE7B,aADoBC,EAASE,MAEjC,CAEAL,eAAeM,EAAWC,GAEtB,IAAIC,GAAkB,EACtB,MAAMC,QAAcR,IAIpB,IAAK,MAAMS,KAAQD,EACf,GAAa,OAATC,GACIA,EAAKtB,WAAamB,EAAQnB,SAAU,CACpCoB,GAAS,EACT,KACJ,CAIR,OAAOA,CACX,CAwBAR,eAAeW,EAAWJ,GAEtB,MACMK,SADcX,KACJY,OAEVC,EAAO,CACTC,OAAQ,MACRC,KAAMC,KAAKC,UAAUX,GACrBY,QAAS,CACL,eAAgB,oCAIlBjB,EAAM,GAAGH,UAAgBa,SACzBT,QAAiBC,MAAMF,EAAKY,SAC5BX,EAASE,MACnB,CClEA,MAAMe,EAAYC,SAASC,eAAe,gBACpCC,EAAYF,SAASC,eAAe,gBAC1BD,SAASC,eAAe,iBAEhCE,iBAAiB,UAAUxB,MAAOyB,IAGtC,GAFAA,EAAMC,iBAEiBC,MAAnBP,EAAUvB,OAAyC,IAAnBuB,EAAUvB,OAAkC,QAAnBuB,EAAUvB,OAAsC8B,MAAnBJ,EAAU1B,OAAyC,IAAnB0B,EAAU1B,OAAkC,QAAnB0B,EAAU1B,MAAiB,CAE1K,MAAM+B,EAAaP,SAASQ,cAAc,+BACpCtB,EAAUd,EAAiB2B,EAAWG,EAAWK,GAGvD,SAFqBtB,EAAWC,GAU5BuB,MAAM,+BARE,OACFnB,EAAWJ,GACjB,MAAMwB,EAAad,KAAKC,UAAUX,GAClCyB,eAAeC,QAAQ,aAAcF,GACrCG,OAAOC,SAASC,OAAO,cAC3B,CAIJ,MAGIN,MAAM","sources":["src/modules/user.ts","src/modules/database.ts","src/modules/registerAcc.ts"],"sourcesContent":["export { User, createUserObject };\n\nclass User {\n\n    public username: string;\n    public password: string;\n    public img?: string;\n    public posts?: object[];\n\n    constructor(\n        username: string,\n        password: string,\n        img?: string,\n        posts?: object[],\n    ) {\n        this.username = username;\n        this.password = password;\n        this.img = img;\n        this.posts = posts;\n    }\n}\n\nfunction createUserObject(nameInput, passInput, picInput?): object {\n\n    const username = (nameInput as HTMLInputElement).value;\n    const password = (passInput as HTMLInputElement).value;\n    let userObject: object;\n\n    if (picInput) {\n        const img = (picInput as HTMLInputElement).value;\n        userObject = new User(username, password, img);\n    }\n\n    else {\n        userObject = new User(username, password);\n    }\n\n    return userObject;\n}","export { fetchDB, userExists, loginUser, addNewUser, loggedInUser, deleteUser, addNewPost };\n\n\nconst baseURL = 'https://megameetings-4101b-default-rtdb.europe-west1.firebasedatabase.app/';\n\nasync function fetchDB(): Promise<any> {\n\n    const url = baseURL + 'users.json';\n    const response = await fetch(url);\n    const users = await response.json();\n    return users;\n}\n\nasync function userExists(newUser): Promise<boolean> {\n\n    let exists: boolean = false;\n    const users = await fetchDB();\n\n\n\n    for (const user of users) {\n        if (user !== null) {\n            if (user.username === newUser.username) {\n                exists = true;\n                break;\n            }\n        }\n    }\n\n    return exists;\n}\n\nasync function loginUser(user): Promise<void> {\n\n    const { username, password } = user;\n    const dbUsers = await fetchDB();\n\n    dbUsers.forEach((user) => {\n\n        if (user !== null) {\n            if (user.username == username) {\n                if (user.password == password) {\n                    const jsonString = JSON.stringify(user);\n                    sessionStorage.setItem('activeUser', jsonString);\n                    window.location.assign('./html/feed.html');\n                }\n                else {\n                    alert('Wrong password');\n                }\n            }\n        }\n    })\n}\n\nasync function addNewUser(newUser): Promise<void> {\n\n    const users = await fetchDB();\n    const i = users.length;\n\n    const init = {\n        method: 'PUT',\n        body: JSON.stringify(newUser),\n        headers: {\n            'Content-type': \"application/json; charset=UTF-8\"\n        }\n    }\n\n    const url = `${baseURL}users/${i}.json`;\n    const response = await fetch(url, init);\n    await response.json();\n}\n\nasync function loggedInUser(activeUserObj): Promise<void> {\n\n    const { username, password } = activeUserObj;\n    const dbUsers = await fetchDB();\n    let index;\n\n    dbUsers.forEach((user, i) => {\n        if (user !== null) {\n\n            if (user.username == username) {\n                if (user.password == password) {\n                    index = i;\n                }\n            }\n        }\n    })\n    return index;\n}\n\n\nasync function deleteUser(index): Promise<void> {\n    const init = {\n        method: 'DELETE',\n        // body: JSON.stringify(newUser),\n        headers: {\n            'Content-type': \"application/json; charset=UTF-8\"\n        }\n    }\n\n    const url = `${baseURL}users/${index}.json`;\n    const response = await fetch(url, init);\n    await response.json();\n}\n\n\nasync function addNewPost(newPost, index) {\n\n    console.log(`funkar, nu inne på användare med index ${index} i database`);\n    console.log(`detta vill jag lägga till: ${newPost}`);\n\n    const init = {\n        method: 'POST',\n        body: JSON.stringify(newPost),\n        headers: {\n            'Content-type': \"application/json; charset=UTF-8\"\n        }\n    }\n\n    const url = `${baseURL}users/${index}/posts.json`;\n    const response = await fetch(url, init);\n    await response.json();\n}\n","import { createUserObject } from \"./user\";\nimport { userExists, addNewUser } from \"./database\";\n\n\nconst nameInput = document.getElementById('reg-username') as HTMLInputElement;\nconst passInput = document.getElementById('reg-password') as HTMLInputElement;\nconst regForm = document.getElementById(\"register-form\") as HTMLFormElement;\n\nregForm.addEventListener(\"submit\", async (event) => {\n    event.preventDefault();\n\n    if (nameInput.value != undefined && nameInput.value != '' && nameInput.value != 'none' && passInput.value != undefined && passInput.value != '' && passInput.value != 'none') {\n\n        const profilePic = document.querySelector('input[type = radio]:checked') as HTMLInputElement;\n        const newUser = createUserObject(nameInput, passInput, profilePic);\n        const exists = await userExists(newUser);\n\n        if (!exists){\n            await addNewUser(newUser);\n            const jsonString = JSON.stringify(newUser);\n            sessionStorage.setItem('activeUser', jsonString);\n            window.location.assign('./feed.html');\n        }\n\n        else\n            alert('Username already exists');\n    }\n\n    else {\n        alert('Name, password and profile picture are mandatory');\n    }\n})\n\n"],"names":["$9f26d28743f7b8b7$export$1f44aaf2ec115b54","constructor","username","password","img","posts","this","$9f26d28743f7b8b7$export$a9245fc88c1302ce","nameInput","passInput","picInput","value","userObject","$32c791bd5399aa33$var$baseURL","async","$32c791bd5399aa33$export$3cbc087763719fc4","url","response","fetch","json","$32c791bd5399aa33$export$2cdae35b703e98a","newUser","exists","users","user","$32c791bd5399aa33$export$20ac2b7422775d6f","i","length","init","method","body","JSON","stringify","headers","$ca6a63358ef6b29c$var$nameInput","document","getElementById","$ca6a63358ef6b29c$var$passInput","addEventListener","event","preventDefault","undefined","profilePic","querySelector","alert","jsonString","sessionStorage","setItem","window","location","assign"],"version":3,"file":"registerAcc.2c020520.js.map"}